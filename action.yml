name: 'Install Procursus'
description: 'Install the Procursus toolchain'
author: 'beerpsi'

inputs:
  packages:
    description: 'Space-delimited list of packages to install after bootstrapping'
    required: false
    default: null
  cache:
    description: 'Cache Procursus installation for faster bootstrapping next run'
    required: false
    default: true
  cache-path:
    description: 'Location to store the Procursus cache'
    required: false
    default: /usr/local/opt/__procursus_cache
  mirror:
    description: 'URL to Procursus repository'
    required: false
    default: 'https://apt.procurs.us'
  suites:
    description: 'Suites to use'
    required: false
    default: 'big_sur'
  components:
    description: 'Components to use'
    required: false
    default: 'main'

runs:
  using: "composite"
  steps:
    - name: initial macOS check
      if: runner.os != 'macOS'
      shell: bash
      run: |
        echo 'This action only works on runners with macOS>=11'
        exit 1
        
    - id: information
      shell: bash
      run: |
        DARWIN_VERSION=`uname -r | cut -d'.' -f1 | tr -d '\n'`
        echo "::set-output name=darwin_version::$DARWIN_VERSION"
        echo "::set-output name=procursus_bootstrapped::`if [[ -e "/opt/procursus/.procursus_strapped" ]]; then echo 'true'; else echo 'false'; fi`"
        
        if (( DARWIN_VERSION < 20 )); then
          >&2 echo 'This action only works on runners with macOS>=11'
          exit 1
        fi

    - uses: actions/cache@v2
      id: procursus-cache
      if: steps.information.outputs.procursus_bootstrapped != 'true' && inputs.cache == 'true'
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ runner.os }}-procursus
      
    - name: Setting up bootstrap
      if: steps.information.outputs.procursus_bootstrapped != 'true' && (inputs.cache != 'true' || steps.procursus-cache.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl -L https://apt.procurs.us/bootstrap_darwin-amd64.tar.zst -o bootstrap.tar.zst
        zstd -d bootstrap.tar.zst
        sudo gtar -xpkf bootstrap.tar -C /
        
    - name: Restoring bootstrap from cache
      if: steps.information.outputs.procursus_bootstrapped != 'true' && (inputs.cache == 'true' && steps.procursus-cache.outputs.cache-hit == 'true')
      shell: bash
      run: |
        sudo mkdir -p ${{ inputs.cache-path }}/procursus/var/cache/apt/archives/partial \
          ${{ inputs.cache-path }}/procursus/var/lib/apt/lists/partial
        sudo rsync -aWlHh --inplace ${{ inputs.cache-path }}/procursus /opt

    - name: Adding Procusus to PATH
      shell: bash
      run: |
        PROCURSUS_PATHS=("/opt/procursus/local/bin" "/opt/procursus/local/sbin" "/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin")
        for i in "${PROCURSUS_PATHS[@]}";
        do
          case ":$PATH:" in
            *:$i:*) echo "$i is already in PATH, not adding";;
            *) echo "$i" >> $GITHUB_PATH;;
          esac
        done
        
        case ":$CPATH:" in
          *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
          *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
        esac
        
        case ":$LIBRARY_PATH:" in
          *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
          *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
        esac

    - name: Create unprivileged user for apt method
      shell: bash
      run: |
        # Taken from Procursus' apt.postinst
        set -e
        getHiddenUserUid()
        {
          local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
          local __NewUID
          for __NewUID in $__UIDS
          do
              if [[ $__NewUID -lt 499 ]] ; then
                  break;
              fi
          done
          echo $((__NewUID+1))
        }
        
        if ! id _apt &>/dev/null; then
          # add unprivileged user for the apt methods
          sudo dscl . -create /Users/_apt UserShell /usr/bin/false
          sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
          sudo dscl . -create /Users/_apt PrimaryGroupID -1
          sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
          sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
        else
          echo "APT Sandbox User already exists, not creating"
        fi
        
    - name: Updating bootstrap
      shell: bash
      run: |
        echo -e 'Types: deb\nURIs:${{ inputs.mirror }}\nSuites: ${{ inputs.suites }}\nComponents: ${{ inputs.components }}\n' | sudo tee /opt/procursus/etc/apt/sources.list.d/procursus.sources
        sudo apt-get -y update
        sudo apt-get -y --allow-downgrades dist-upgrade || :
    
    - name: Caching bootstrap
      if: steps.information.outputs.procursus_bootstrapped != 'true' && inputs.cache == 'true' 
      shell: bash
      run: |
        sudo mkdir -p ${{ inputs.cache-path }}
        sudo rsync -alHh --inplace /opt/procursus ${{ inputs.cache-path }}
        sudo rm -rf ${{ inputs.cache-path }}/procursus/var/cache/apt/archives/partial \
          ${{ inputs.cache-path }}/procursus/var/lib/apt/lists/partial \
          ${{ inputs.cache-path }}/procursus/Library/dpkg/triggers/Lock

    - name: Install packages
      shell: bash
      if: inputs.packages
      run: |
        sudo apt-get install -y ${{ inputs.packages }}
        

branding:
  icon: download-cloud
  color: purple
